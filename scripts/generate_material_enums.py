"""
This script generates a 'Material' PHP enum that combines block and
item IDs to create a unique ID. It also adds utility methods to the
PHP class.
"""

import json

material_data = {}

def create_php_enum():
    """
    Creates the 'Material.php' PHP file with the material enumeration
    and utility methods.
    """
    sorted_items = sorted(material_data.items())

    cases = "\n".join([f"    case {name} = {id};" for id, name in sorted_items])

    enum_string = f"""<?php

// This file is automatically generated. Do not edit manually.

namespace SnapMine;

enum Material: int
{{
{cases}
    /**
     * @return bool True if the material is 'air'.
     */
    public function isAir(): bool
    {{
        return $this->value === 0;
    }}

    /**
     * @return bool True if the material has an associated block ID.
     */
    public function isBlock(): bool
    {{
        return $this->isAir() || ($this->value >> 16) & 0xFFFF > 0;
    }}

    /**
     * @return bool True if the material is an item.
     */
    public function isItem(): bool
    {{
        return !$this->isBlock();
    }}

    /**
     * @return int The item ID of the material.
     */
    public function getItemId(): int
    {{
        return $this->value & 0xFFFF;
    }}

    /**
     * @return int The block ID of the material.
     */
    public function getBlockId(): int
    {{
        return ($this->value >> 16) & 0xFFFF;
    }}

    /**
     * @return string The full Minecraft key for the material.
     */
    public function getKey(): string
    {{
        return 'minecraft:' . strtolower($this->name);
    }}

    /**
     * @param int $id The combined material ID.
     * @return self The enum case corresponding to the ID.
     */
    public static function getMaterial(int $id): self
    {{
        // Note: Ensure the ID is valid to avoid errors.
        return self::cases()[$id];
    }}
}}
"""

    with open("Material.php", "w") as file:
        file.write(enum_string)

def main():
    """
    Main function to load item and block data and generate the enum.
    """
    try:
        with open("registries.json", "r") as f:
            items_registry = json.load(f)
        with open("blocks.json", "r") as f:
            blocks_data = json.load(f)
    except FileNotFoundError as e:
        print(f"Error: A JSON file is missing: {e.filename}")
        return

    items = items_registry["minecraft:item"]["entries"]
    blocks_registry = items_registry["minecraft:block"]["entries"]

    for name, value in items.items():
        item_id = value['protocol_id']
        block_id = 0

        if name in blocks_data:
            block_id = blocks_data[name]["states"][0]["id"]

        combined_id = (block_id << 16) | item_id

        formatted_name = name.replace("minecraft:", "").upper()
        material_data[combined_id] = formatted_name

    for name, value in blocks_registry.items():
        formatted_name = name.replace("minecraft:", "").upper()
        if formatted_name in material_data.values():
            continue

        item_id = value['protocol_id']
        block_id = 0

        if name in blocks_data:
            block_id = blocks_data[name]["states"][0]["id"]

        combined_id = (block_id << 16) | item_id
        material_data[combined_id] = formatted_name

    create_php_enum()
    print("Material enum successfully generated in 'Material.php'.")

if __name__ == "__main__":
    main()